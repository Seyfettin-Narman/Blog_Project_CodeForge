// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeyfBlog.Data.Context;

#nullable disable

namespace SeyfBlog.Data.Migrations
{
    [DbContext(typeof(SeyfBlogDbContext))]
    [Migration("20240321132631_usersss")]
    partial class usersss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f935ac0-fc48-4404-8a3e-f4d092223e8e"),
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(4194),
                            Name = "Yazılım",
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("9e139175-6c2d-4f87-b26b-f3fdac76ef6d"),
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(4200),
                            Name = "Yazılım/Bilişim",
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("2edffa17-0a93-4b0a-b8fb-7b1662f68611"),
                            CreatedBy = "Christian M. Fuchs",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(4203),
                            Name = "Donanım",
                            isActive = false
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4d0283b-3499-4189-a720-62b0f778de6b"),
                            ConcurrencyStamp = "5ae2dee5-74d2-4887-bc97-400444c3dd6c",
                            Name = "Topmanager",
                            NormalizedName = "TOPMANAGER"
                        },
                        new
                        {
                            Id = new Guid("08dd1239-f563-44e7-a389-b692da355ce8"),
                            ConcurrencyStamp = "eaee603e-8727-4436-b299-cbba12526c3c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b48aa289-340a-4694-9f72-c11e5d95c581"),
                            ConcurrencyStamp = "e7a37843-3d00-4ce9-a005-d0d52286b0b5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b35a3fd6-698f-4bb9-af71-8c4e8478c2e4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0cc34a42-7270-4ad0-a871-0ec045ca15d2",
                            Email = "topmanager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            ImageId = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            LockoutEnabled = false,
                            NormalizedEmail = "TOPMANAGER@GMAIL.COM",
                            NormalizedUserName = "TOPMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFUBOjTGq3nI2te6GpIYcOJOG9vZeE1QpzCPCgYa10MHAUnrCq2z+vxa8ohy0doDoQ==",
                            PhoneNumber = "+905457658945",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9a06dbd1-b732-4a85-9db6-432570a6a1c0",
                            TwoFactorEnabled = false,
                            UserName = "topmanager@gmail.com",
                            lastName = "Narman"
                        },
                        new
                        {
                            Id = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38c270c2-304a-4aca-b965-f452052b6a1d",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Seyfettin",
                            ImageId = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI0XZ+29RqnoklfqQye3lBNqgoPzsP2v4m8eIEmvzf/jWq6HBjCRVy7T6FR9mK4R1g==",
                            PhoneNumber = "+905457652945",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5c0f6924-5866-4f49-afa1-d34218553311",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            lastName = "Narman"
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b35a3fd6-698f-4bb9-af71-8c4e8478c2e4"),
                            RoleId = new Guid("f4d0283b-3499-4189-a720-62b0f778de6b")
                        },
                        new
                        {
                            UserId = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            RoleId = new Guid("08dd1239-f563-44e7-a389-b692da355ce8")
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(5398),
                            FileName = "images/seyfettin",
                            FileType = "jpg",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("026dd0d1-07f7-4f83-9324-d091ca7403f2"),
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(5401),
                            FileName = "images/murat",
                            FileType = "jpg",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("9ed22153-c44e-4b44-84cd-072e889fb62c"),
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(5404),
                            FileName = "images/murat",
                            FileType = "jpg",
                            isActive = true
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82f6f374-ff04-4444-be78-f03031e4ad60"),
                            CategoryId = new Guid("2f935ac0-fc48-4404-8a3e-f4d092223e8e"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse consectetur dolor non ex gravida, at.",
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(6276),
                            ImageId = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            Title = "Back-End CodeForge Bootcamp",
                            UserId = new Guid("b35a3fd6-698f-4bb9-af71-8c4e8478c2e4"),
                            Views = 4,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("45573ef1-1130-4544-b975-d2a2b44ef2b1"),
                            CategoryId = new Guid("9e139175-6c2d-4f87-b26b-f3fdac76ef6d"),
                            Content = "Curabitur cursus ullamcorper sapien, at fermentum elit finibus at. Nunc tristique nec sapien eu feugiat. Ut quis dictum turpis. Proin",
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(6281),
                            ImageId = new Guid("026dd0d1-07f7-4f83-9324-d091ca7403f2"),
                            Title = "CodeRoots: Planting the Seeds of JavaScript",
                            UserId = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            Views = 10,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("55d0a250-dcba-4a93-9717-3de16758e1f0"),
                            CategoryId = new Guid("2edffa17-0a93-4b0a-b8fb-7b1662f68611"),
                            Content = "Nullam eleifend, nisl vel molestie iaculis, metus lorem mollis mi, vitae interdum odio lorem id odio. Duis aliquet est orci.",
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 21, 16, 26, 30, 739, DateTimeKind.Local).AddTicks(6340),
                            ImageId = new Guid("9ed22153-c44e-4b44-84cd-072e889fb62c"),
                            Title = "The Evolution of Avionics Networks From ARINC 429 to AFDX",
                            UserId = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            Views = 40,
                            isActive = false
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdRoleClaim", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUser", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserClaim", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserLogin", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserRole", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserToken", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Post", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeyfBlog.Entity.Entities.Image", "Image")
                        .WithMany("Posts")
                        .HasForeignKey("ImageId");

                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUser", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Image", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}

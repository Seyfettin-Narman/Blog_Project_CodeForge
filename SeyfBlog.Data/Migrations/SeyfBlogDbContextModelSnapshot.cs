// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeyfBlog.Data.Context;

#nullable disable

namespace SeyfBlog.Data.Migrations
{
    [DbContext(typeof(SeyfBlogDbContext))]
    partial class SeyfBlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f935ac0-fc48-4404-8a3e-f4d092223e8e"),
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 450, DateTimeKind.Local).AddTicks(9703),
                            Name = "Yazılım",
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("9e139175-6c2d-4f87-b26b-f3fdac76ef6d"),
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 450, DateTimeKind.Local).AddTicks(9709),
                            Name = "Yazılım/Bilişim",
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("2edffa17-0a93-4b0a-b8fb-7b1662f68611"),
                            CreatedBy = "Christian M. Fuchs",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 450, DateTimeKind.Local).AddTicks(9712),
                            Name = "Donanım",
                            isActive = false
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4d0283b-3499-4189-a720-62b0f778de6b"),
                            ConcurrencyStamp = "ae2ccc64-369a-48b6-93e2-4d71eced4b02",
                            Name = "Topmanager",
                            NormalizedName = "TOPMANAGER"
                        },
                        new
                        {
                            Id = new Guid("08dd1239-f563-44e7-a389-b692da355ce8"),
                            ConcurrencyStamp = "5ea119a2-3875-4cac-b0aa-452130b22e13",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b48aa289-340a-4694-9f72-c11e5d95c581"),
                            ConcurrencyStamp = "292e3d6c-573d-4afd-8a27-43915c56ff33",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b35a3fd6-698f-4bb9-af71-8c4e8478c2e4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f63c094-3d60-4817-9e71-206b4f464163",
                            Email = "topmanager@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            ImageId = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            LockoutEnabled = false,
                            NormalizedEmail = "TOPMANAGER@GMAIL.COM",
                            NormalizedUserName = "TOPMANAGER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMBVP21rDvMVz2+sU4cxzZEY9JLhahmheekdPi4IFESVTxsK9XWbJ/zqMrx2NJYZeA==",
                            PhoneNumber = "+905457658945",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "59de696c-6154-405d-9355-cbc5612dd642",
                            TwoFactorEnabled = false,
                            UserName = "topmanager@gmail.com",
                            lastName = "Narman"
                        },
                        new
                        {
                            Id = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04616970-8200-453c-872c-4b7e98a2ef1d",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Seyfettin",
                            ImageId = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBCIYU/JiKNL4F8q4Y4Hv2KRXHlmOjMZLeWDoL+5Wrttcso5H/wdFzLCVmqwqnx1fg==",
                            PhoneNumber = "+905457652945",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "317230f5-82fb-46a6-844f-c0048656f10b",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            lastName = "Narman"
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b35a3fd6-698f-4bb9-af71-8c4e8478c2e4"),
                            RoleId = new Guid("f4d0283b-3499-4189-a720-62b0f778de6b")
                        },
                        new
                        {
                            UserId = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            RoleId = new Guid("08dd1239-f563-44e7-a389-b692da355ce8")
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 451, DateTimeKind.Local).AddTicks(891),
                            FileName = "images/seyfettin",
                            FileType = "jpg",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("026dd0d1-07f7-4f83-9324-d091ca7403f2"),
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 451, DateTimeKind.Local).AddTicks(906),
                            FileName = "images/murat",
                            FileType = "jpg",
                            isActive = true
                        },
                        new
                        {
                            Id = new Guid("9ed22153-c44e-4b44-84cd-072e889fb62c"),
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 451, DateTimeKind.Local).AddTicks(910),
                            FileName = "images/murat",
                            FileType = "jpg",
                            isActive = true
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3aa68ab-395f-4978-9e58-2cde2e30e799"),
                            CategoryId = new Guid("2f935ac0-fc48-4404-8a3e-f4d092223e8e"),
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse consectetur dolor non ex gravida, at.",
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 451, DateTimeKind.Local).AddTicks(1785),
                            ImageId = new Guid("18339c9c-0871-4f8f-8ee1-eaaf482b813d"),
                            Title = "Back-End CodeForge Bootcamp",
                            UserId = new Guid("b35a3fd6-698f-4bb9-af71-8c4e8478c2e4"),
                            Views = 4,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("999cdf12-4a9e-4a3e-90a5-4ceb81bbd2d5"),
                            CategoryId = new Guid("9e139175-6c2d-4f87-b26b-f3fdac76ef6d"),
                            Content = "Curabitur cursus ullamcorper sapien, at fermentum elit finibus at. Nunc tristique nec sapien eu feugiat. Ut quis dictum turpis. Proin",
                            CreatedBy = "Murat",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 451, DateTimeKind.Local).AddTicks(1793),
                            ImageId = new Guid("026dd0d1-07f7-4f83-9324-d091ca7403f2"),
                            Title = "CodeRoots: Planting the Seeds of JavaScript",
                            UserId = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            Views = 10,
                            isActive = false
                        },
                        new
                        {
                            Id = new Guid("1d0977ee-48d0-4cef-893e-eb1f5f7319fd"),
                            CategoryId = new Guid("2edffa17-0a93-4b0a-b8fb-7b1662f68611"),
                            Content = "Nullam eleifend, nisl vel molestie iaculis, metus lorem mollis mi, vitae interdum odio lorem id odio. Duis aliquet est orci.",
                            CreatedBy = "Seyfettin",
                            CreatedDate = new DateTime(2024, 3, 22, 11, 32, 36, 451, DateTimeKind.Local).AddTicks(1798),
                            ImageId = new Guid("9ed22153-c44e-4b44-84cd-072e889fb62c"),
                            Title = "The Evolution of Avionics Networks From ARINC 429 to AFDX",
                            UserId = new Guid("c1315bb8-4d09-450e-a549-8ba87d8fa228"),
                            Views = 40,
                            isActive = false
                        });
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdRoleClaim", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUser", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserClaim", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserLogin", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserRole", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUserToken", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Post", b =>
                {
                    b.HasOne("SeyfBlog.Entity.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeyfBlog.Entity.Entities.Image", "Image")
                        .WithMany("Posts")
                        .HasForeignKey("ImageId");

                    b.HasOne("SeyfBlog.Entity.Entities.IdUser", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.IdUser", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("SeyfBlog.Entity.Entities.Image", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
